{"version":3,"sources":["vendor/ember-cli/app-prefix.js","todomvc-ember-cli/adapters/application.js","todomvc-ember-cli/app.js","todomvc-ember-cli/controllers/todo.js","todomvc-ember-cli/controllers/todos.js","todomvc-ember-cli/initializers/app-version.js","todomvc-ember-cli/initializers/export-application-global.js","todomvc-ember-cli/models/todo.js","todomvc-ember-cli/router.js","todomvc-ember-cli/routes/todos.js","todomvc-ember-cli/routes/todos/active.js","todomvc-ember-cli/routes/todos/completed.js","todomvc-ember-cli/routes/todos/index.js","todomvc-ember-cli/templates/application.js","todomvc-ember-cli/templates/todos.js","todomvc-ember-cli/templates/todos/active.js","todomvc-ember-cli/templates/todos/completed.js","todomvc-ember-cli/templates/todos/index.js","todomvc-ember-cli/tests/1-unit/controllers/todo-test.js","todomvc-ember-cli/tests/1-unit/controllers/todo-test.jshint.js","todomvc-ember-cli/tests/1-unit/controllers/todos-test.js","todomvc-ember-cli/tests/1-unit/controllers/todos-test.jshint.js","todomvc-ember-cli/tests/1-unit/models/todo-test.js","todomvc-ember-cli/tests/1-unit/models/todo-test.jshint.js","todomvc-ember-cli/tests/1-unit/routes/todos-test.js","todomvc-ember-cli/tests/1-unit/routes/todos-test.jshint.js","todomvc-ember-cli/tests/1-unit/routes/todos/active-test.js","todomvc-ember-cli/tests/1-unit/routes/todos/active-test.jshint.js","todomvc-ember-cli/tests/1-unit/routes/todos/completed-test.js","todomvc-ember-cli/tests/1-unit/routes/todos/completed-test.jshint.js","todomvc-ember-cli/tests/1-unit/routes/todos/index-test.js","todomvc-ember-cli/tests/1-unit/routes/todos/index-test.jshint.js","todomvc-ember-cli/tests/2-integration/add-new-todo-test.js","todomvc-ember-cli/tests/2-integration/add-new-todo-test.jshint.js","todomvc-ember-cli/tests/2-integration/remove-todo-test.js","todomvc-ember-cli/tests/2-integration/remove-todo-test.jshint.js","todomvc-ember-cli/tests/adapters/application.jshint.js","todomvc-ember-cli/tests/app.jshint.js","todomvc-ember-cli/tests/controllers/todo.jshint.js","todomvc-ember-cli/tests/controllers/todos.jshint.js","todomvc-ember-cli/tests/fixtures/todo.js","todomvc-ember-cli/tests/fixtures/todo.jshint.js","todomvc-ember-cli/tests/helpers/delay.js","todomvc-ember-cli/tests/helpers/delay.jshint.js","todomvc-ember-cli/tests/helpers/mock-model.js","todomvc-ember-cli/tests/helpers/mock-model.jshint.js","todomvc-ember-cli/tests/helpers/mock-models.js","todomvc-ember-cli/tests/helpers/mock-models.jshint.js","todomvc-ember-cli/tests/helpers/module-for-integration.js","todomvc-ember-cli/tests/helpers/module-for-integration.jshint.js","todomvc-ember-cli/tests/helpers/resolver.js","todomvc-ember-cli/tests/helpers/resolver.jshint.js","todomvc-ember-cli/tests/helpers/start-app.js","todomvc-ember-cli/tests/helpers/start-app.jshint.js","todomvc-ember-cli/tests/models/todo.jshint.js","todomvc-ember-cli/tests/router.jshint.js","todomvc-ember-cli/tests/routes/todos.jshint.js","todomvc-ember-cli/tests/routes/todos/active.jshint.js","todomvc-ember-cli/tests/routes/todos/completed.jshint.js","todomvc-ember-cli/tests/routes/todos/index.jshint.js","todomvc-ember-cli/tests/test-helper.js","todomvc-ember-cli/tests/test-helper.jshint.js","vendor/ember-cli/app-suffix.js","vendor/ember-cli/app-boot.js"],"sourcesContent":["/* jshint ignore:start */\n\n/* jshint ignore:end */\n","define('todomvc-ember-cli/adapters/application', ['exports', 'ember', 'ember-data'], function (exports, Ember, DS) {\n\n  'use strict';\n\n  var adapter = Ember['default'].testing ? DS['default'].FixtureAdapter : DS['default'].LSAdapter.extend({\n    namespace: 'todos-ember-es6'\n  });\n\n  exports['default'] = adapter;\n\n});","define('todomvc-ember-cli/app', ['exports', 'ember', 'ember/resolver', 'ember/load-initializers', 'todomvc-ember-cli/config/environment'], function (exports, Ember, Resolver, loadInitializers, config) {\n\n  'use strict';\n\n  Ember['default'].MODEL_FACTORY_INJECTIONS = true;\n\n  var App = Ember['default'].Application.extend({\n    modulePrefix: config['default'].modulePrefix,\n    podModulePrefix: config['default'].podModulePrefix,\n    Resolver: Resolver['default']\n  });\n\n  loadInitializers['default'](App, config['default'].modulePrefix);\n\n  exports['default'] = App;\n\n});","define('todomvc-ember-cli/controllers/todo', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Controller.extend({\n    actions: {\n      editTodo: function() {\n        this.set('isEditing', true);\n      },\n      acceptChanges: function() {\n        this.set('isEditing', false);\n\n        if (Ember['default'].isEmpty(this.get('model.title'))) {\n          this.send('removeTodo');\n        } else {\n          this.get('model').save();\n        }\n      },\n      removeTodo: function() {\n        var todo = this.get('model');\n        todo.deleteRecord();\n        todo.save();\n      }\n    },\n\n    isEditing: false,\n\n    isCompleted: Ember['default'].computed('model.isCompleted', {\n      get: function() {\n        return this.get('model').get('isCompleted');\n      },\n      set: function(key, value) {\n        var model = this.get('model');\n        model.set('isCompleted', value);\n        model.save();\n        return value;\n      }\n    })\n  });\n\n});","define('todomvc-ember-cli/controllers/todos', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].ArrayController.extend({\n    actions: {\n      createTodo: function() {\n        // Get the todo title set by the \"New Todo\" text field\n        var title = this.get('newTitle');\n        if (!title.trim()) { return; }\n\n        // Create the new Todo Model\n        var todo = this.store.createRecord('todo', {\n          title: title,\n          isCompleted: false\n        });\n\n        // Clear the \"New Todo\" text field\n        this.set('newTitle', '');\n\n        // Save the new model\n        todo.save();\n      },\n\n      clearCompleted: function() {\n        var completed = this.filterBy('isCompleted', true);\n        completed.invoke('deleteRecord');\n        completed.invoke('save');\n      }\n    },\n\n    remaining: function() {\n      return this.filterBy('isCompleted', false).get('length');\n    }.property('@each.isCompleted'),\n\n    inflection: function() {\n      var remaining = this.get('remaining');\n      return remaining === 1 ? 'todo' : 'todos';\n    }.property('remaining'),\n\n    hasCompleted: function() {\n      return this.get('completed') > 0;\n    }.property('completed'),\n\n    completed: function() {\n      return this.filterBy('isCompleted', true).get('length');\n    }.property('@each.isCompleted'),\n\n    allAreDone: Ember['default'].computed('@each.isCompleted', {\n      get: function() {\n        return !!this.get('length') && this.everyProperty('isCompleted', true);\n      },\n      set: function(key, value) {\n        this.setEach('isCompleted', value);\n        this.invoke('save');\n        return value;\n      }\n    })\n\n  });\n\n});","define('todomvc-ember-cli/initializers/app-version', ['exports', 'todomvc-ember-cli/config/environment', 'ember'], function (exports, config, Ember) {\n\n  'use strict';\n\n  var classify = Ember['default'].String.classify;\n  var registered = false;\n\n  exports['default'] = {\n    name: 'App Version',\n    initialize: function(container, application) {\n      if (!registered) {\n        var appName = classify(application.toString());\n        Ember['default'].libraries.register(appName, config['default'].APP.version);\n        registered = true;\n      }\n    }\n  }\n\n});","define('todomvc-ember-cli/initializers/export-application-global', ['exports', 'ember', 'todomvc-ember-cli/config/environment'], function (exports, Ember, config) {\n\n  'use strict';\n\n  exports.initialize = initialize;\n\n  function initialize(container, application) {\n    var classifiedName = Ember['default'].String.classify(config['default'].modulePrefix);\n\n    if (config['default'].exportApplicationGlobal && !window[classifiedName]) {\n      window[classifiedName] = application;\n    }\n  };\n\n  exports['default'] = {\n    name: 'export-application-global',\n\n    initialize: initialize\n  };\n\n});","define('todomvc-ember-cli/models/todo', ['exports', 'ember-data'], function (exports, DS) {\n\n  'use strict';\n\n  var Todo = DS['default'].Model.extend({\n    title: DS['default'].attr('string'),\n    isCompleted: DS['default'].attr('boolean')\n  });\n\n  exports['default'] = Todo;\n\n});","define('todomvc-ember-cli/router', ['exports', 'ember', 'todomvc-ember-cli/config/environment'], function (exports, Ember, config) {\n\n  'use strict';\n\n  var Router = Ember['default'].Router.extend({\n    location: config['default'].locationType\n  });\n\n  Router.map(function() {\n    this.resource('todos', { path: '/' }, function() {\n      this.route('active');\n      this.route('completed');\n    });\n  });\n\n  exports['default'] = Router;\n\n});","define('todomvc-ember-cli/routes/todos', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Route.extend({\n    model: function() {\n      return this.store.find('todo');\n    }\n  });\n\n});","define('todomvc-ember-cli/routes/todos/active', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Route.extend({\n    model: function() {\n      return this.store.filter('todo', function(todo) {\n        return !todo.get('isCompleted');\n      });\n    },\n    renderTemplate: function(controller) {\n      this.render('todos/index', { controller: controller } );\n    }\n  });\n\n});","define('todomvc-ember-cli/routes/todos/completed', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Route.extend({\n    model: function() {\n      return this.store.filter('todo', function(todo) {\n        return todo.get('isCompleted');\n      });\n    },\n    renderTemplate: function(controller) {\n      this.render('todos/index', { controller: controller } );\n    }\n  });\n\n});","define('todomvc-ember-cli/routes/todos/index', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Route.extend({\n    model: function() {\n      return this.modelFor('todos');\n    }\n  });\n\n});","define('todomvc-ember-cli/templates/application', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.12.1\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"footer\");\n        dom.setAttribute(el1,\"id\",\"info\");\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"p\");\n        var el3 = dom.createTextNode(\"Double-click to edit a todo\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, content = hooks.content;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n        dom.insertBoundary(fragment, 0);\n        content(env, morph0, context, \"outlet\");\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('todomvc-ember-cli/templates/todos', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.12.1\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"All\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          return fragment;\n        }\n      };\n    }());\n    var child1 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.12.1\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"Active\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          return fragment;\n        }\n      };\n    }());\n    var child2 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.12.1\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"Completed\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          return fragment;\n        }\n      };\n    }());\n    var child3 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.12.1\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"      \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"button\");\n          dom.setAttribute(el1,\"id\",\"clear-completed\");\n          var el2 = dom.createTextNode(\"\\n        Clear completed (\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createComment(\"\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\")\\n      \");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, element = hooks.element, content = hooks.content;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var element0 = dom.childAt(fragment, [1]);\n          var morph0 = dom.createMorphAt(element0,1,1);\n          element(env, element0, context, \"action\", [\"clearCompleted\"], {});\n          content(env, morph0, context, \"completed\");\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.12.1\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"section\");\n        dom.setAttribute(el1,\"id\",\"todoapp\");\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"header\");\n        dom.setAttribute(el2,\"id\",\"header\");\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"h1\");\n        var el4 = dom.createTextNode(\"todos\");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createComment(\"\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"section\");\n        dom.setAttribute(el2,\"id\",\"main\");\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createComment(\"\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createComment(\"\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"footer\");\n        dom.setAttribute(el2,\"id\",\"footer\");\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"span\");\n        dom.setAttribute(el3,\"id\",\"todo-count\");\n        var el4 = dom.createTextNode(\"\\n      \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"strong\");\n        var el5 = dom.createComment(\"\");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\" \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createComment(\"\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\" left\\n    \");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"ul\");\n        dom.setAttribute(el3,\"id\",\"filters\");\n        var el4 = dom.createTextNode(\"\\n      \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"li\");\n        var el5 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createComment(\"\");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n      \");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n      \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"li\");\n        var el5 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createComment(\"\");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n      \");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n      \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"li\");\n        var el5 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createComment(\"\");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n      \");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createComment(\"\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"  \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, inline = hooks.inline, content = hooks.content, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element1 = dom.childAt(fragment, [0]);\n        var element2 = dom.childAt(element1, [3]);\n        var element3 = dom.childAt(element1, [5]);\n        var element4 = dom.childAt(element3, [1]);\n        var element5 = dom.childAt(element3, [3]);\n        var morph0 = dom.createMorphAt(dom.childAt(element1, [1]),3,3);\n        var morph1 = dom.createMorphAt(element2,1,1);\n        var morph2 = dom.createMorphAt(element2,3,3);\n        var morph3 = dom.createMorphAt(dom.childAt(element4, [1]),0,0);\n        var morph4 = dom.createMorphAt(element4,3,3);\n        var morph5 = dom.createMorphAt(dom.childAt(element5, [1]),1,1);\n        var morph6 = dom.createMorphAt(dom.childAt(element5, [3]),1,1);\n        var morph7 = dom.createMorphAt(dom.childAt(element5, [5]),1,1);\n        var morph8 = dom.createMorphAt(element3,5,5);\n        inline(env, morph0, context, \"input\", [], {\"type\": \"text\", \"id\": \"new-todo\", \"placeholder\": \"What needs to be done?\", \"value\": get(env, context, \"newTitle\"), \"action\": \"createTodo\"});\n        content(env, morph1, context, \"outlet\");\n        inline(env, morph2, context, \"input\", [], {\"type\": \"checkbox\", \"id\": \"toggle-all\", \"checked\": get(env, context, \"allAreDone\")});\n        content(env, morph3, context, \"remaining\");\n        content(env, morph4, context, \"inflection\");\n        block(env, morph5, context, \"link-to\", [\"todos.index\"], {\"activeClass\": \"selected\"}, child0, null);\n        block(env, morph6, context, \"link-to\", [\"todos.active\"], {\"activeClass\": \"selected\"}, child1, null);\n        block(env, morph7, context, \"link-to\", [\"todos.completed\"], {\"activeClass\": \"selected\"}, child2, null);\n        block(env, morph8, context, \"if\", [get(env, context, \"hasCompleted\")], {}, child3, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('todomvc-ember-cli/templates/todos/active', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.12.1\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, content = hooks.content;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n        dom.insertBoundary(fragment, 0);\n        content(env, morph0, context, \"outlet\");\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('todomvc-ember-cli/templates/todos/completed', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.12.1\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, content = hooks.content;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n        dom.insertBoundary(fragment, 0);\n        content(env, morph0, context, \"outlet\");\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('todomvc-ember-cli/templates/todos/index', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      var child0 = (function() {\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.12.1\",\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"        \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment(\"\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, get = hooks.get, inline = hooks.inline;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);\n            inline(env, morph0, context, \"input\", [], {\"class\": \"edit\", \"value\": get(env, context, \"todo.model.title\"), \"focus-out\": \"acceptChanges\", \"insert-newline\": \"acceptChanges\", \"autofocus\": \"autofocus\"});\n            return fragment;\n          }\n        };\n      }());\n      var child1 = (function() {\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.12.1\",\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"        \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment(\"\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n        \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"label\");\n            var el2 = dom.createComment(\"\");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n        \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"button\");\n            dom.setAttribute(el1,\"class\",\"destroy\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, get = hooks.get, inline = hooks.inline, element = hooks.element, content = hooks.content;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var element0 = dom.childAt(fragment, [3]);\n            var element1 = dom.childAt(fragment, [5]);\n            var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);\n            var morph1 = dom.createMorphAt(element0,0,0);\n            inline(env, morph0, context, \"input\", [], {\"type\": \"checkbox\", \"checked\": get(env, context, \"todo.isCompleted\"), \"class\": \"toggle\"});\n            element(env, element0, context, \"action\", [\"editTodo\"], {\"on\": \"doubleClick\"});\n            content(env, morph1, context, \"todo.model.title\");\n            element(env, element1, context, \"action\", [\"removeTodo\"], {});\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.12.1\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"    \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"li\");\n          var el2 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createComment(\"\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"    \");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, subexpr = hooks.subexpr, concat = hooks.concat, attribute = hooks.attribute, block = hooks.block;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var element2 = dom.childAt(fragment, [1]);\n          var morph0 = dom.createMorphAt(element2,1,1);\n          var attrMorph0 = dom.createAttrMorph(element2, 'class');\n          attribute(env, attrMorph0, element2, \"class\", concat(env, [subexpr(env, context, \"if\", [get(env, context, \"todo.isCompleted\"), \"completed\"], {}), \" \", subexpr(env, context, \"if\", [get(env, context, \"todo.isEditing\"), \"editing\"], {})]));\n          block(env, morph0, context, \"if\", [get(env, context, \"todo.isEditing\")], {}, child0, child1);\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.12.1\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"ul\");\n        dom.setAttribute(el1,\"id\",\"todo-list\");\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createComment(\"\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(dom.childAt(fragment, [0]),1,1);\n        block(env, morph0, context, \"each\", [get(env, context, \"this\")], {\"itemController\": \"todo\", \"keyword\": \"todo\"}, child0, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('todomvc-ember-cli/tests/1-unit/controllers/todo-test', ['ember', 'ember-qunit', 'todomvc-ember-cli/tests/fixtures/todo', 'todomvc-ember-cli/tests/helpers/mock-model'], function (Ember, ember_qunit, FIXTURES, mockModel) {\n\n  'use strict';\n\n  ember_qunit.moduleFor('controller:todo', 'TodoController', {\n    // Specify the other units that are required for this test.\n    needs: ['model:todo']\n  });\n\n  // Replace this with your real tests.\n  ember_qunit.test('it exists', function() {\n    var controller = this.subject();\n    ok(controller);\n  });\n\n  ember_qunit.test('editTodo', function() {\n    var controller = this.subject();\n    Ember['default'].run(function() {\n      controller.send('editTodo');\n      equal(controller.get('isEditing'), true);\n    });\n  });\n\n  ember_qunit.test('acceptChanges with a title', function() {\n    expect(4);\n    var controller = this.subject();\n    Ember['default'].run(function() {\n      var model = mockModel['default'](FIXTURES['default'][0]);\n      controller.set('model', model);\n\n      controller.send('editTodo');\n      equal(controller.get('isEditing'), true);\n      model.set('title', FIXTURES['default'][1].title);\n      controller.send('acceptChanges');\n      equal(controller.get('isEditing'), false);\n\n      equal(model.get('deleted'), false);\n      equal(model.get('saved'), true);\n    });\n  });\n\n  ember_qunit.test('acceptChanges with an empty title', function() {\n    expect(4);\n    var controller = this.subject();\n    Ember['default'].run(function() {\n      var model = mockModel['default'](FIXTURES['default'][0]);\n      controller.set('model', model);\n\n      controller.send('editTodo');\n      equal(controller.get('isEditing'), true);\n      model.set('title', '');\n      controller.send('acceptChanges');\n      equal(controller.get('isEditing'), false);\n\n      equal(model.get('deleted'), true);\n      equal(model.get('saved'), true);\n    });\n  });\n\n\n  ember_qunit.test('removeTodo', function() {\n    expect(2);\n    var controller = this.subject();\n    Ember['default'].run(function() {\n      var model = mockModel['default'](FIXTURES['default'][0]);\n      controller.set('model', model);\n\n      controller.send('removeTodo');\n\n      equal(model.get('deleted'), true);\n      equal(model.get('saved'), true);\n    });\n  });\n\n});","define('todomvc-ember-cli/tests/1-unit/controllers/todo-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - 1-unit/controllers');\n  test('1-unit/controllers/todo-test.js should pass jshint', function() { \n    ok(true, '1-unit/controllers/todo-test.js should pass jshint.'); \n  });\n\n});","define('todomvc-ember-cli/tests/1-unit/controllers/todos-test', ['ember', 'ember-qunit', 'todomvc-ember-cli/tests/fixtures/todo', 'todomvc-ember-cli/tests/helpers/mock-models'], function (Ember, ember_qunit, FIXTURES, mockModels) {\n\n  'use strict';\n\n  ember_qunit.moduleFor('controller:todos', 'TodosController', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  ember_qunit.test('it exists', function() {\n    var controller = this.subject();\n    ok(controller);\n  });\n\n\n  ember_qunit.test('remaining', function () {\n    expect(2);\n    var controller = this.subject();\n    var models = mockModels['default'](FIXTURES['default']);\n    controller.addObjects(models);\n    equal(controller.get('remaining'), 1);\n    controller.findBy('id', '3').set('isCompleted', true);\n    equal(controller.get('remaining'), 0);\n  });\n\n\n  ember_qunit.test('completed', function () {\n    expect(2);\n    var controller = this.subject();\n    var models = mockModels['default'](FIXTURES['default']);\n    controller.addObjects(models);\n    equal(controller.get('completed'), 2);\n    controller.findBy('id', '3').set('isCompleted', true);\n    equal(controller.get('completed'), 3);\n  });\n\n  ember_qunit.test('allAreDone', function() {\n    expect(2);\n    var controller = this.subject();\n    var models = mockModels['default'](FIXTURES['default']);\n    controller.addObjects(models);\n    equal(controller.get('allAreDone'), false);\n    controller.findBy('id', '3').set('isCompleted', true);\n    equal(controller.get('allAreDone'), true);\n  });\n\n});","define('todomvc-ember-cli/tests/1-unit/controllers/todos-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - 1-unit/controllers');\n  test('1-unit/controllers/todos-test.js should pass jshint', function() { \n    ok(true, '1-unit/controllers/todos-test.js should pass jshint.'); \n  });\n\n});","define('todomvc-ember-cli/tests/1-unit/models/todo-test', ['ember', 'ember-qunit', 'todomvc-ember-cli/tests/fixtures/todo'], function (Ember, ember_qunit, FIXTURES) {\n\n  'use strict';\n\n  ember_qunit.moduleForModel('todo', 'Todo', {\n    // Specify the other units that are required for this test.\n    needs: [],\n    tearDown: function() {\n      this.store.unloadAll();\n    }\n  });\n\n  ember_qunit.test('it exists', function() {\n    var model = this.subject();\n    // var store = this.store();\n    ok(!!model);\n  });\n\n  ember_qunit.test('it has a title property', function() {\n    var model = this.subject(FIXTURES['default'][0]);\n    equal(typeof model.get('title'), 'string');\n    Ember['default'].run(function() {\n      model.set('title', 'new title');\n      equal(model.get('title'), 'new title');\n    });\n  });\n\n  ember_qunit.test('it has a isCompleted property', function() {\n    var model = this.subject(FIXTURES['default'][1]);\n    Ember['default'].run(function() {\n      equal(typeof model.get('isCompleted'), 'boolean');\n      model.set('isCompleted', true);\n      equal(model.get('isCompleted'), true);\n      model.set('isCompleted', false);\n      equal(model.get('isCompleted'), false);\n    });\n  });\n\n});","define('todomvc-ember-cli/tests/1-unit/models/todo-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - 1-unit/models');\n  test('1-unit/models/todo-test.js should pass jshint', function() { \n    ok(true, '1-unit/models/todo-test.js should pass jshint.'); \n  });\n\n});","define('todomvc-ember-cli/tests/1-unit/routes/todos-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor('route:todos', 'TodosRoute', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  ember_qunit.test('it exists', function() {\n    var route = this.subject();\n    ok(route);\n  });\n\n});","define('todomvc-ember-cli/tests/1-unit/routes/todos-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - 1-unit/routes');\n  test('1-unit/routes/todos-test.js should pass jshint', function() { \n    ok(true, '1-unit/routes/todos-test.js should pass jshint.'); \n  });\n\n});","define('todomvc-ember-cli/tests/1-unit/routes/todos/active-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor('route:todos/active', 'TodosActiveRoute', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  ember_qunit.test('it exists', function() {\n    var route = this.subject();\n    ok(route);\n  });\n\n});","define('todomvc-ember-cli/tests/1-unit/routes/todos/active-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - 1-unit/routes/todos');\n  test('1-unit/routes/todos/active-test.js should pass jshint', function() { \n    ok(true, '1-unit/routes/todos/active-test.js should pass jshint.'); \n  });\n\n});","define('todomvc-ember-cli/tests/1-unit/routes/todos/completed-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor('route:todos/completed', 'TodosCompletedRoute', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  ember_qunit.test('it exists', function() {\n    var route = this.subject();\n    ok(route);\n  });\n\n});","define('todomvc-ember-cli/tests/1-unit/routes/todos/completed-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - 1-unit/routes/todos');\n  test('1-unit/routes/todos/completed-test.js should pass jshint', function() { \n    ok(true, '1-unit/routes/todos/completed-test.js should pass jshint.'); \n  });\n\n});","define('todomvc-ember-cli/tests/1-unit/routes/todos/index-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor('route:todos/index', 'TodosIndexRoute', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  ember_qunit.test('it exists', function() {\n    var route = this.subject();\n    ok(route);\n  });\n\n});","define('todomvc-ember-cli/tests/1-unit/routes/todos/index-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - 1-unit/routes/todos');\n  test('1-unit/routes/todos/index-test.js should pass jshint', function() { \n    ok(true, '1-unit/routes/todos/index-test.js should pass jshint.'); \n  });\n\n});","define('todomvc-ember-cli/tests/2-integration/add-new-todo-test', ['ember', 'todomvc-ember-cli/tests/helpers/module-for-integration', 'todomvc-ember-cli/tests/helpers/delay', 'todomvc-ember-cli/tests/fixtures/todo'], function (Ember, moduleForIntegration, delay, Fixtures) {\n\n  'use strict';\n\n  var ms = 0;\n\n  moduleForIntegration['default']('Integration - Add a new todo');\n\n\n  asyncTest('Application fixtures are initialized', function() {\n    expect(4);\n    visit('/')\n      .then(delay['default'](ms))\n      .then(function(msg) {\n        equal(find('#main > ul > li').size(), Fixtures['default'].length);\n        equal(find('#main > ul > li:nth-of-type(1) label').text(), Fixtures['default'][0].title);\n        equal(find('#main > ul > li:nth-of-type(2) label').text(), Fixtures['default'][1].title);\n        equal(find('#main > ul > li:nth-of-type(3) label').text(), Fixtures['default'][2].title);\n        start(); // see http://api.qunitjs.com/QUnit.asyncTest/\n      });\n  });\n\n\n  asyncTest('Typing a todo name and pressing ENTER adds a new todo', function() {\n    expect(2);\n\n    var text = 'My new awesome todo';\n\n    visit('/')\n      .then(delay['default'](ms))\n      .then(function () {\n        return fillIn('#new-todo', text);\n      })\n      .then(delay['default'](ms))\n      .then(function () {\n        return keyEvent('#new-todo', 'keyup', 13);\n      })\n      .then(delay['default'](ms))\n      .then(function(msg) {\n        equal(find('#main > ul > li').size(), 4);\n        equal(find('#main > ul > li:nth-of-type(4) label').text(), text);\n        start(); // see http://api.qunitjs.com/QUnit.asyncTest/\n      });\n  });\n\n});","define('todomvc-ember-cli/tests/2-integration/add-new-todo-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - 2-integration');\n  test('2-integration/add-new-todo-test.js should pass jshint', function() { \n    ok(true, '2-integration/add-new-todo-test.js should pass jshint.'); \n  });\n\n});","define('todomvc-ember-cli/tests/2-integration/remove-todo-test', ['ember', 'todomvc-ember-cli/tests/helpers/module-for-integration', 'todomvc-ember-cli/tests/helpers/delay', 'todomvc-ember-cli/tests/fixtures/todo'], function (Ember, moduleForIntegration, delay, Fixtures) {\n\n  'use strict';\n\n  var ms = 0, App;\n\n  moduleForIntegration['default']('Integration - Remove a todo');\n\n\n  asyncTest('Application fixtures are initialized', function() {\n    expect(4);\n    visit('/')\n      .then(delay['default'](ms))\n      .then(function(msg) {\n        equal(find('#main > ul > li').size(), Fixtures['default'].length);\n        equal(find('#main > ul > li:nth-of-type(1) label').text(), Fixtures['default'][0].title);\n        equal(find('#main > ul > li:nth-of-type(2) label').text(), Fixtures['default'][1].title);\n        equal(find('#main > ul > li:nth-of-type(3) label').text(), Fixtures['default'][2].title);\n        start(); // see http://api.qunitjs.com/QUnit.asyncTest/\n      });\n  });\n\n\n  asyncTest('Typing a todo name and pressing ENTER adds a new todo', function() {\n    expect(3);\n\n    var text = 'My new awesome todo';\n\n    visit('/')\n      .then(delay['default'](ms))\n      .then(function () {\n        return click('#main > ul > li:nth-of-type(2) button.destroy');\n      })\n      .then(delay['default'](ms))\n      .then(function(msg) {\n        equal(find('#main > ul > li').size(), Fixtures['default'].length - 1);\n        equal(find('#main > ul > li:nth-of-type(1) label').text(), Fixtures['default'][0].title);\n        equal(find('#main > ul > li:nth-of-type(2) label').text(), Fixtures['default'][2].title);\n        start(); // see http://api.qunitjs.com/QUnit.asyncTest/\n      });\n  });\n\n});","define('todomvc-ember-cli/tests/2-integration/remove-todo-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - 2-integration');\n  test('2-integration/remove-todo-test.js should pass jshint', function() { \n    ok(true, '2-integration/remove-todo-test.js should pass jshint.'); \n  });\n\n});","define('todomvc-ember-cli/tests/adapters/application.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - adapters');\n  test('adapters/application.js should pass jshint', function() { \n    ok(true, 'adapters/application.js should pass jshint.'); \n  });\n\n});","define('todomvc-ember-cli/tests/app.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - .');\n  test('app.js should pass jshint', function() { \n    ok(true, 'app.js should pass jshint.'); \n  });\n\n});","define('todomvc-ember-cli/tests/controllers/todo.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - controllers');\n  test('controllers/todo.js should pass jshint', function() { \n    ok(true, 'controllers/todo.js should pass jshint.'); \n  });\n\n});","define('todomvc-ember-cli/tests/controllers/todos.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - controllers');\n  test('controllers/todos.js should pass jshint', function() { \n    ok(true, 'controllers/todos.js should pass jshint.'); \n  });\n\n});","define('todomvc-ember-cli/tests/fixtures/todo', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = [\n    { id: \"1\", title: 'install ember-cli', isCompleted: true },\n    { id: \"2\", title: 'install additional dependencies', isCompleted: true },\n    { id: \"3\", title: 'develop amazing things', isCompleted: false }\n  ];\n\n});","define('todomvc-ember-cli/tests/fixtures/todo.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - fixtures');\n  test('fixtures/todo.js should pass jshint', function() { \n    ok(true, 'fixtures/todo.js should pass jshint.'); \n  });\n\n});","define('todomvc-ember-cli/tests/helpers/delay', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  function delay(ms) {\n    return function () {\n      return new Ember['default'].RSVP.Promise(function (resolve, reject) {\n        setTimeout(function () {\n          resolve();\n        }, ms);\n      });\n    };\n  }\n  exports['default'] = delay;\n\n});","define('todomvc-ember-cli/tests/helpers/delay.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - helpers');\n  test('helpers/delay.js should pass jshint', function() { \n    ok(true, 'helpers/delay.js should pass jshint.'); \n  });\n\n});","define('todomvc-ember-cli/tests/helpers/mock-model', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  function mockModel(item) {\n    return Ember['default'].ObjectProxy.create(Ember['default'].merge(item, {\n      saved: false,\n      save: function() {\n        this.set('saved', true);\n      },\n      deleted: false,\n      deleteRecord: function() {\n        this.set('deleted', true);\n      }\n    }));\n  }\n  exports['default'] = mockModel;\n\n});","define('todomvc-ember-cli/tests/helpers/mock-model.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - helpers');\n  test('helpers/mock-model.js should pass jshint', function() { \n    ok(true, 'helpers/mock-model.js should pass jshint.'); \n  });\n\n});","define('todomvc-ember-cli/tests/helpers/mock-models', ['exports', 'todomvc-ember-cli/tests/helpers/mock-model'], function (exports, mockModel) {\n\n  'use strict';\n\n  function mockModels(data) {\n    return data.map(mockModel['default']);\n  }\n  exports['default'] = mockModels;\n\n});","define('todomvc-ember-cli/tests/helpers/mock-models.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - helpers');\n  test('helpers/mock-models.js should pass jshint', function() { \n    ok(true, 'helpers/mock-models.js should pass jshint.'); \n  });\n\n});","define('todomvc-ember-cli/tests/helpers/module-for-integration', ['exports', 'ember', 'todomvc-ember-cli/tests/helpers/start-app'], function (exports, Ember, startApp) {\n\n  'use strict';\n\n  function moduleForIntegration (name) {\n    var container = {};\n\n    module(name, {\n      setup: function setup() {\n        container.App = startApp['default']();\n      },\n      teardown: function teardown() {\n        Ember['default'].run(function() {\n          container.App.destroy();\n        });\n      }\n    });\n\n    return container;\n  }\n  exports['default'] = moduleForIntegration;\n\n});","define('todomvc-ember-cli/tests/helpers/module-for-integration.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - helpers');\n  test('helpers/module-for-integration.js should pass jshint', function() { \n    ok(true, 'helpers/module-for-integration.js should pass jshint.'); \n  });\n\n});","define('todomvc-ember-cli/tests/helpers/resolver', ['exports', 'ember/resolver', 'todomvc-ember-cli/config/environment'], function (exports, Resolver, config) {\n\n  'use strict';\n\n  var resolver = Resolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: config['default'].modulePrefix,\n    podModulePrefix: config['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n\n});","define('todomvc-ember-cli/tests/helpers/resolver.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - helpers');\n  test('helpers/resolver.js should pass jshint', function() { \n    ok(true, 'helpers/resolver.js should pass jshint.'); \n  });\n\n});","define('todomvc-ember-cli/tests/helpers/start-app', ['exports', 'ember', 'todomvc-ember-cli/app', 'todomvc-ember-cli/router', 'todomvc-ember-cli/config/environment', 'todomvc-ember-cli/tests/fixtures/todo', 'todomvc-ember-cli/models/todo'], function (exports, Ember, Application, Router, config, TodoFixtures, Todo) {\n\n  'use strict';\n\n  function startApp(attrs) {\n    var App;\n\n    var attributes = Ember['default'].merge({}, config['default'].APP);\n    attributes = Ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    Router['default'].reopen({\n      location: 'none'\n    });\n\n    Ember['default'].run(function() {\n      App = Application['default'].create(attributes);\n      App.setupForTesting();\n      App.injectTestHelpers();\n\n      Todo['default'].reopenClass({\n        FIXTURES: $.extend(true, [], TodoFixtures['default']) // extend, otherwise the TodoFixtures gets mutated\n      });\n    });\n\n    // Disabled due to https://github.com/emberjs/ember.js/issues/10310\n    // App.reset(); // this shouldn't be needed, i want to be able to \"start an app at a specific URL\"\n\n    return App;\n  }\n  exports['default'] = startApp;\n\n});","define('todomvc-ember-cli/tests/helpers/start-app.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - helpers');\n  test('helpers/start-app.js should pass jshint', function() { \n    ok(true, 'helpers/start-app.js should pass jshint.'); \n  });\n\n});","define('todomvc-ember-cli/tests/models/todo.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - models');\n  test('models/todo.js should pass jshint', function() { \n    ok(true, 'models/todo.js should pass jshint.'); \n  });\n\n});","define('todomvc-ember-cli/tests/router.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - .');\n  test('router.js should pass jshint', function() { \n    ok(true, 'router.js should pass jshint.'); \n  });\n\n});","define('todomvc-ember-cli/tests/routes/todos.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - routes');\n  test('routes/todos.js should pass jshint', function() { \n    ok(true, 'routes/todos.js should pass jshint.'); \n  });\n\n});","define('todomvc-ember-cli/tests/routes/todos/active.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - routes/todos');\n  test('routes/todos/active.js should pass jshint', function() { \n    ok(true, 'routes/todos/active.js should pass jshint.'); \n  });\n\n});","define('todomvc-ember-cli/tests/routes/todos/completed.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - routes/todos');\n  test('routes/todos/completed.js should pass jshint', function() { \n    ok(true, 'routes/todos/completed.js should pass jshint.'); \n  });\n\n});","define('todomvc-ember-cli/tests/routes/todos/index.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - routes/todos');\n  test('routes/todos/index.js should pass jshint', function() { \n    ok(true, 'routes/todos/index.js should pass jshint.'); \n  });\n\n});","define('todomvc-ember-cli/tests/test-helper', ['todomvc-ember-cli/tests/helpers/resolver', 'ember-qunit'], function (resolver, ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.setResolver(resolver['default']);\n\n  document.write('<div id=\"ember-testing-container\"><div id=\"ember-testing\"></div></div>');\n\n  QUnit.config.urlConfig.push({ id: 'nocontainer', label: 'Hide container'});\n\n  var containerVisibility = QUnit.urlParams.nocontainer ? 'hidden' : 'visible';\n  document.getElementById('ember-testing-container').style.visibility = containerVisibility;\n\n});","define('todomvc-ember-cli/tests/test-helper.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - .');\n  test('test-helper.js should pass jshint', function() { \n    ok(true, 'test-helper.js should pass jshint.'); \n  });\n\n});","/* jshint ignore:start */\n\n/* jshint ignore:end */\n","/* jshint ignore:start */\n\ndefine('todomvc-ember-cli/config/environment', ['ember'], function(Ember) {\n  var prefix = 'todomvc-ember-cli';\n/* jshint ignore:start */\n\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = Ember['default'].$('meta[name=\"' + metaName + '\"]').attr('content');\n  var config = JSON.parse(unescape(rawConfig));\n\n  return { 'default': config };\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n/* jshint ignore:end */\n\n});\n\nif (runningTests) {\n  require(\"todomvc-ember-cli/tests/test-helper\");\n} else {\n  require(\"todomvc-ember-cli/app\")[\"default\"].create({\"LOG_ACTIVE_GENERATION\":true,\"LOG_VIEW_LOOKUPS\":true,\"name\":\"todomvc-ember-cli\",\"version\":\"DETACHED_HEAD.c0119e4a\"});\n}\n\n/* jshint ignore:end */\n"],"names":[],"mappings":"AAAA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdtzEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;","file":"todomvc-ember-cli.js"}